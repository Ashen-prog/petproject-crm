import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import {
  fetchClients,
  addClient,
  updateClient,
  deleteClient,
  addClientLocal,
  updateClientLocal,
  deleteClientLocal,
  setSearchQuery,
  setFilterStatus,
  setFilterCategory,
  setSortBy,
  setViewMode
} from '../store/clientsSlice';
import styles from './ClientsPage.module.css';

const ClientsPage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
    const { 
    items: clients, 
    loading, 
    searchQuery, 
    filterStatus, 
    filterCategory, 
    sortBy, 
    viewMode 
  } = useSelector(state => state.clients);
  const token = useSelector(state => state.auth.token);

  const [showModal, setShowModal] = useState(false);
  const [editingClient, setEditingClient] = useState(null);  const [formData, setFormData] = useState({
    name: '',
    contactPerson: '',
    phone: '',
    email: '',
    address: '',
    category: '–û–±—ã—á–Ω—ã–π',
    status: 'potential',
    totalSpent: '',
    notes: '',
    priority: 'medium',
    source: ''
  });

  useEffect(() => {
    if (token) {
      dispatch(fetchClients());
    }
  }, [dispatch, token]);
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const categories = [...new Set(clients.map(client => client.category))];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const filteredClients = clients
    .filter(client => {      const matchesSearch = 
        client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        client.contactPerson.toLowerCase().includes(searchQuery.toLowerCase()) ||
        client.category.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesStatus = filterStatus === 'all' || client.status === filterStatus;
      const matchesCategory = filterCategory === 'all' || client.category === filterCategory;
      
      return matchesSearch && matchesStatus && matchesCategory;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.name.localeCompare(b.name);        case 'totalSpent':
          return b.totalSpent - a.totalSpent;
        case 'lastVisit':
          return new Date(b.lastVisit) - new Date(a.lastVisit);
        case 'priority':
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return priorityOrder[b.priority] - priorityOrder[a.priority];
        default:
          return 0;
      }
    });

  const handleAdd = () => {
    if (formData.name.trim()) {      const clientData = {
        ...formData,
        totalSpent: parseInt(formData.totalSpent) || 0
      };
      
      if (token) {
        dispatch(addClient(clientData));
      } else {
        dispatch(addClientLocal(clientData));
      }
      resetForm();
    }
  };

  const handleEdit = (client) => {
    setEditingClient(client);
    setFormData({
      name: client.name,
      contactPerson: client.contactPerson,      phone: client.phone,
      email: client.email,
      address: client.address,
      category: client.category,
      status: client.status,
      totalSpent: client.totalSpent.toString(),
      notes: client.notes,
      priority: client.priority,
      source: client.source
    });
    setShowModal(true);
  };

  const handleUpdate = () => {
    if (formData.name.trim()) {      const updatedClient = { 
        ...editingClient, 
        ...formData,
        totalSpent: parseInt(formData.totalSpent) || 0
      };
      
      if (token) {
        dispatch(updateClient(updatedClient));
      } else {
        dispatch(updateClientLocal(updatedClient));
      }
      resetForm();
    }
  };

  const handleDelete = (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?')) {
      if (token) {
        dispatch(deleteClient(id));
      } else {
        dispatch(deleteClientLocal(id));
      }
    }
  };
  const resetForm = () => {
    setFormData({
      name: '', contactPerson: '', phone: '', email: '', address: '',
      category: '–û–±—ã—á–Ω—ã–π', status: 'potential', totalSpent: '', notes: '', priority: 'medium', source: ''
    });
    setEditingClient(null);
    setShowModal(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (editingClient) {
      handleUpdate();
    } else {
      handleAdd();
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#27ae60';
      case 'potential': return '#f39c12';
      case 'inactive': return '#e74c3c';
      default: return '#95a5a6';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#e74c3c';
      case 'medium': return '#f39c12';
      case 'low': return '#95a5a6';
      default: return '#95a5a6';
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  };
  const getClientStats = () => {
    const total = clients.length;
    const active = clients.filter(c => c.status === 'active').length;
    const potential = clients.filter(c => c.status === 'potential').length;
    const totalSpent = clients.reduce((sum, c) => sum + c.totalSpent, 0);
    
    return { total, active, potential, totalSpent };
  };

  const stats = getClientStats();

  return (
    <div className={styles.clientsPage}>
      <div className={styles.notebookPage}>
      {/* –®–∞–ø–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className={styles.header}>
        <div className={styles.headerLeft}>
          <button 
            className={styles.backButton}
            onClick={() => navigate('/')}
            title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>          <div className={styles.titleSection}>
            <h1>–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</h1>
            <p className={styles.subtitle}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</p>
          </div>
        </div>
        <button 
          className={styles.addButton}
          onClick={() => setShowModal(true)}
        >
          + –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        </button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.statsSection}>
        <div className={styles.statCard}>
          <div className={styles.statNumber}>{stats.total}</div>
          <div className={styles.statLabel}>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statNumber}>{stats.active}</div>
          <div className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statNumber}>{stats.potential}</div>
          <div className={styles.statLabel}>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ</div>        </div>
        <div className={styles.statCard}>
          <div className={styles.statNumber}>{formatCurrency(stats.totalSpent)}</div>
          <div className={styles.statLabel}>–û–±—â–∞—è —Å—É–º–º–∞</div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className={styles.controlsSection}>
        <div className={styles.searchAndFilters}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => dispatch(setSearchQuery(e.target.value))}
            className={styles.searchInput}
          />
          
          <select 
            value={filterStatus} 
            onChange={(e) => dispatch(setFilterStatus(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="potential">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ</option>
            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
          </select>          <select 
            value={filterCategory} 
            onChange={(e) => dispatch(setFilterCategory(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>

          <select 
            value={sortBy} 
            onChange={(e) => dispatch(setSortBy(e.target.value))}
            className={styles.sortSelect}
          >            <option value="name">–ü–æ –∏–º–µ–Ω–∏</option>
            <option value="totalSpent">–ü–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç</option>
            <option value="lastVisit">–ü–æ –¥–∞—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏—è</option>
            <option value="priority">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</option>
          </select>
        </div>

        <div className={styles.viewControls}>
          <button 
            className={`${styles.viewButton} ${viewMode === 'cards' ? styles.active : ''}`}
            onClick={() => dispatch(setViewMode('cards'))}
          >
            üìã –ö–∞—Ä—Ç–æ—á–∫–∏
          </button>
          <button 
            className={`${styles.viewButton} ${viewMode === 'table' ? styles.active : ''}`}
            onClick={() => dispatch(setViewMode('table'))}
          >
            üìä –¢–∞–±–ª–∏—Ü–∞
          </button>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      {loading ? (
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : viewMode === 'cards' ? (
        <div className={styles.clientsGrid}>
          {filteredClients.map(client => (
            <div key={client.id} className={styles.clientCard}>
              <div className={styles.cardHeader}>
                <div className={styles.clientTitle}>
                  <h3>{client.name}</h3>
                  <span 
                    className={styles.statusBadge}
                    style={{ backgroundColor: getStatusColor(client.status) }}
                  >
                    {client.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : 
                     client.status === 'potential' ? '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                  </span>
                </div>
                <div 
                  className={styles.priorityIndicator}
                  style={{ backgroundColor: getPriorityColor(client.priority) }}
                  title={`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${client.priority}`}
                >
                  {client.priority === 'high' ? 'üî•' : 
                   client.priority === 'medium' ? '‚ö°' : 'üìù'}
                </div>
              </div>
              
              <div className={styles.cardContent}>                <div className={styles.contactInfo}>
                  <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {client.phone}</p>
                  <p><strong>Email:</strong> {client.email}</p>
                  <p><strong>–ê–¥—Ä–µ—Å:</strong> {client.address}</p>
                  <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {client.category}</p>
                </div>
                
                <div className={styles.businessInfo}>
                  <p><strong>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</strong> {formatCurrency(client.totalSpent)}</p>
                  <p><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç:</strong> {new Date(client.lastVisit).toLocaleDateString('ru-RU')}</p>
                  <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {client.source}</p>
                </div>
                
                {client.notes && (
                  <div className={styles.notes}>
                    <strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {client.notes}
                  </div>
                )}
              </div>
              
              <div className={styles.cardActions}>
                <button 
                  className={styles.editButton}
                  onClick={() => handleEdit(client)}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button 
                  className={styles.deleteButton}
                  onClick={() => handleDelete(client.id)}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className={styles.tableContainer}>
          <table className={styles.clientsTable}>            <thead>
              <tr>
                <th>–ò–º—è</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</th>
                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {filteredClients.map(client => (
                <tr key={client.id}>
                  <td>{client.name}</td>
                  <td>{client.phone}</td>
                  <td>{client.category}</td>
                  <td>
                    <span 
                      className={styles.statusBadge}
                      style={{ backgroundColor: getStatusColor(client.status) }}
                    >
                      {client.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : 
                       client.status === 'potential' ? '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                    </span>                  </td>
                  <td>{formatCurrency(client.totalSpent)}</td>
                  <td>
                    <span 
                      className={styles.priorityBadge}
                      style={{ backgroundColor: getPriorityColor(client.priority) }}
                    >
                      {client.priority === 'high' ? 'üî• –í—ã—Å–æ–∫–∏–π' : 
                       client.priority === 'medium' ? '‚ö° –°—Ä–µ–¥–Ω–∏–π' : 'üìù –ù–∏–∑–∫–∏–π'}
                    </span>
                  </td>
                  <td>
                    <div className={styles.tableActions}>
                      <button 
                        className={styles.editButton}
                        onClick={() => handleEdit(client)}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        className={styles.deleteButton}
                        onClick={() => handleDelete(client.id)}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {filteredClients.length === 0 && !loading && (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üìã</div>
          <h3>–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {showModal && (
        <div className={styles.modalOverlay} onClick={() => resetForm()}>
          <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
            <h2>{editingClient ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' : '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'}</h2>
              <form onSubmit={handleSubmit} className={styles.form}>
              <div className={styles.formRow}>
                <div className={styles.formGroup}>
                  <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *</label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    required
                  />
                </div>
                
                <div className={styles.formGroup}>
                  <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</label>
                  <input
                    type="text"
                    value={formData.contactPerson}
                    onChange={(e) => setFormData({...formData, contactPerson: e.target.value})}
                  />
                </div>
              </div>

              <div className={styles.formRow}>
                <div className={styles.formGroup}>
                  <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                  <input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  />
                </div>
                
                <div className={styles.formGroup}>
                  <label>Email</label>
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                  />
                </div>
              </div>

              <div className={styles.formGroup}>
                <label>–ê–¥—Ä–µ—Å</label>
                <input
                  type="text"
                  value={formData.address}
                  onChange={(e) => setFormData({...formData, address: e.target.value})}
                />
              </div>              <div className={styles.formRow}>
                <div className={styles.formGroup}>
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                  >
                    <option value="VIP">VIP</option>
                    <option value="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π">–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π</option>
                    <option value="–û–±—ã—á–Ω—ã–π">–û–±—ã—á–Ω—ã–π</option>
                  </select>
                </div>
                
                <div className={styles.formGroup}>
                  <label>–ò—Å—Ç–æ—á–Ω–∏–∫</label>
                  <select
                    value={formData.source}
                    onChange={(e) => setFormData({...formData, source: e.target.value})}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫</option>
                    <option value="–°–∞–π—Ç">–°–∞–π—Ç</option>
                    <option value="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</option>
                    <option value="–°–æ—Ü—Å–µ—Ç–∏">–°–æ—Ü—Å–µ—Ç–∏</option>
                    <option value="–†–µ–∫–ª–∞–º–∞">–†–µ–∫–ª–∞–º–∞</option>
                    <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
                  </select>
                </div>
              </div>

              <div className={styles.formRow}>
                <div className={styles.formGroup}>
                  <label>–°—Ç–∞—Ç—É—Å</label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData({...formData, status: e.target.value})}
                  >
                    <option value="potential">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π</option>
                    <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                    <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π</option>
                  </select>
                </div>
                
                <div className={styles.formGroup}>
                  <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                  <select
                    value={formData.priority}
                    onChange={(e) => setFormData({...formData, priority: e.target.value})}
                  >
                    <option value="low">–ù–∏–∑–∫–∏–π</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                  </select>
                </div>
              </div>              <div className={styles.formGroup}>
                <label>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ (—Ä—É–±.)</label>
                <input
                  type="number"
                  value={formData.totalSpent}
                  onChange={(e) => setFormData({...formData, totalSpent: e.target.value})}
                  min="0"
                />
              </div>

              <div className={styles.formGroup}>
                <label>–ó–∞–º–µ—Ç–∫–∏</label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData({...formData, notes: e.target.value})}
                  rows="3"
                />
              </div>
              
              <div className={styles.formActions}>
                <button 
                  type="button" 
                  onClick={resetForm}
                  className={styles.cancelButton}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  type="submit"
                  className={styles.submitButton}
                >
                  {editingClient ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      </div>
    </div>
  );
};

export default ClientsPage;
