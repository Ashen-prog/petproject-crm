import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import {
  addFinanceLocal,
  updateFinanceLocal,
  deleteFinanceLocal,
  setSearchQuery,
  setFilterType,
  setFilterCategory,
  setFilterPaymentMethod,
  setSortBy,
  setViewMode
} from '../store/financesSlice';
import styles from './FinancePage.module.css';

const FinancePage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const {
    items: finances,
    searchQuery,
    filterType,
    filterCategory,
    filterPaymentMethod,
    sortBy,
    viewMode
  } = useSelector(state => state.finances);

  const [showModal, setShowModal] = useState(false);
  const [editingFinance, setEditingFinance] = useState(null);
  const [formData, setFormData] = useState({
    type: 'income',
    category: '',
    description: '',
    amount: '',
    date: new Date().toISOString().split('T')[0],
    clientName: '',
    paymentMethod: '–ù–∞–ª–∏—á–Ω—ã–µ'
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const filteredAndSortedFinances = useMemo(() => {
    let filtered = finances.filter(finance => {
      const matchesSearch = finance.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          finance.clientName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          finance.category.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesType = filterType === 'all' || finance.type === filterType;
      const matchesCategory = filterCategory === 'all' || finance.category === filterCategory;
      const matchesPaymentMethod = filterPaymentMethod === 'all' || finance.paymentMethod === filterPaymentMethod;
      
      return matchesSearch && matchesType && matchesCategory && matchesPaymentMethod;
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'date':
          return new Date(b.date) - new Date(a.date);
        case 'amount':
          return b.amount - a.amount;
        case 'category':
          return a.category.localeCompare(b.category);
        case 'type':
          return a.type.localeCompare(b.type);
        default:
          return 0;
      }
    });

    return filtered;
  }, [finances, searchQuery, filterType, filterCategory, filterPaymentMethod, sortBy]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = useMemo(() => {
    const totalIncome = finances
      .filter(f => f.type === 'income')
      .reduce((sum, f) => sum + f.amount, 0);
    
    const totalExpense = finances
      .filter(f => f.type === 'expense')
      .reduce((sum, f) => sum + f.amount, 0);
    
    const profit = totalIncome - totalExpense;
    
    return { totalIncome, totalExpense, profit };
  }, [finances]);

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
  const categories = [...new Set(finances.map(f => f.category))].filter(Boolean);
  const paymentMethods = [...new Set(finances.map(f => f.paymentMethod))].filter(Boolean);

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB'
    }).format(amount);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const handleAddFinance = () => {
    setEditingFinance(null);
    setFormData({
      type: 'income',
      category: '',
      description: '',
      amount: '',
      date: new Date().toISOString().split('T')[0],
      clientName: '',
      paymentMethod: '–ù–∞–ª–∏—á–Ω—ã–µ'
    });
    setShowModal(true);
  };

  const handleEditFinance = (finance) => {
    setEditingFinance(finance);
    setFormData({ ...finance });
    setShowModal(true);
  };

  const handleDeleteFinance = (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é?')) {
      dispatch(deleteFinanceLocal(id));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.description || !formData.amount || !formData.category) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const financeData = {
      ...formData,
      amount: parseFloat(formData.amount)
    };

    if (editingFinance) {
      dispatch(updateFinanceLocal({ ...financeData, id: editingFinance.id }));
    } else {
      dispatch(addFinanceLocal(financeData));
    }

    setShowModal(false);
    setEditingFinance(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  return (
    <div className={styles.notebookPage}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className={styles.pageHeader}>
        <button 
          onClick={() => navigate('/')}
          className={styles.backButton}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h2 className={styles.pageTitle}>–§–∏–Ω–∞–Ω—Å—ã</h2>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.statsContainer}>
        <div className={styles.statCard}>
          <div className={`${styles.statValue} ${styles.income}`}>
            {formatCurrency(stats.totalIncome)}
          </div>
          <div className={styles.statLabel}>–î–æ—Ö–æ–¥—ã</div>
        </div>
        <div className={styles.statCard}>
          <div className={`${styles.statValue} ${styles.expense}`}>
            {formatCurrency(stats.totalExpense)}
          </div>
          <div className={styles.statLabel}>–†–∞—Å—Ö–æ–¥—ã</div>
        </div>
        <div className={styles.statCard}>
          <div className={`${styles.statValue} ${styles.profit}`}>
            {formatCurrency(stats.profit)}
          </div>
          <div className={styles.statLabel}>–ü—Ä–∏–±—ã–ª—å</div>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className={styles.controlsPanel}>
        <div className={styles.controlsRow}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π..."
            value={searchQuery}
            onChange={(e) => dispatch(setSearchQuery(e.target.value))}
            className={styles.searchInput}
          />
          
          <select
            value={filterType}
            onChange={(e) => dispatch(setFilterType(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
            <option value="income">–î–æ—Ö–æ–¥—ã</option>
            <option value="expense">–†–∞—Å—Ö–æ–¥—ã</option>
          </select>

          <select
            value={filterCategory}
            onChange={(e) => dispatch(setFilterCategory(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>

          <select
            value={filterPaymentMethod}
            onChange={(e) => dispatch(setFilterPaymentMethod(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</option>
            {paymentMethods.map(method => (
              <option key={method} value={method}>{method}</option>
            ))}
          </select>

          <button 
            onClick={handleAddFinance}
            className={styles.addButton}
          >
            + –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
          </button>
        </div>

        <div className={styles.controlsRow}>
          <select
            value={sortBy}
            onChange={(e) => dispatch(setSortBy(e.target.value))}
            className={styles.filterSelect}
          >
            <option value="date">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ</option>
            <option value="amount">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ</option>
            <option value="category">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            <option value="type">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É</option>
          </select>

          <div className={styles.viewToggle}>
            <button
              onClick={() => dispatch(setViewMode('cards'))}
              className={`${styles.viewButton} ${viewMode === 'cards' ? styles.active : ''}`}
            >
              –ö–∞—Ä—Ç–æ—á–∫–∏
            </button>
            <button
              onClick={() => dispatch(setViewMode('table'))}
              className={`${styles.viewButton} ${viewMode === 'table' ? styles.active : ''}`}
            >
              –¢–∞–±–ª–∏—Ü–∞
            </button>
          </div>
        </div>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö */}
      {filteredAndSortedFinances.length === 0 ? (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üí∞</div>
          <h3 className={styles.emptyTitle}>
            {finances.length === 0 ? '–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç' : '–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
          </h3>
          <p className={styles.emptyDescription}>
            {finances.length === 0 
              ? '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é' 
              : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'}
          </p>
        </div>
      ) : viewMode === 'cards' ? (
        <div className={styles.cardsContainer}>
          {filteredAndSortedFinances.map(finance => (
            <div key={finance.id} className={`${styles.financeCard} ${styles[finance.type]}`}>
              <div className={styles.cardHeader}>
                <span className={`${styles.cardType} ${styles[finance.type]}`}>
                  {finance.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'}
                </span>
                <div className={styles.cardActions}>
                  <button 
                    onClick={() => handleEditFinance(finance)}
                    className={`${styles.actionButton} ${styles.editButton}`}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button 
                    onClick={() => handleDeleteFinance(finance.id)}
                    className={`${styles.actionButton} ${styles.deleteButton}`}
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
              
              <div className={`${styles.cardAmount} ${styles[finance.type]}`}>
                {finance.type === 'income' ? '+' : '-'}{formatCurrency(finance.amount)}
              </div>
              
              <div className={styles.cardDescription}>
                {finance.description}
              </div>
              
              <div className={styles.cardDetails}>
                <div className={styles.cardDetail}>
                  <span className={styles.detailLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                  <span className={styles.detailValue}>{finance.category}</span>
                </div>
                <div className={styles.cardDetail}>
                  <span className={styles.detailLabel}>–î–∞—Ç–∞:</span>
                  <span className={styles.detailValue}>{formatDate(finance.date)}</span>
                </div>
                {finance.clientName && (
                  <div className={styles.cardDetail}>
                    <span className={styles.detailLabel}>–ö–ª–∏–µ–Ω—Ç:</span>
                    <span className={styles.detailValue}>{finance.clientName}</span>
                  </div>
                )}
                <div className={styles.cardDetail}>
                  <span className={styles.detailLabel}>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</span>
                  <span className={styles.detailValue}>{finance.paymentMethod}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className={styles.tableContainer}>
          <table className={styles.financeTable}>
            <thead>
              <tr>
                <th>–¢–∏–ø</th>
                <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                <th>–°—É–º–º–∞</th>
                <th>–î–∞—Ç–∞</th>
                <th>–ö–ª–∏–µ–Ω—Ç</th>
                <th>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {filteredAndSortedFinances.map(finance => (
                <tr key={finance.id}>
                  <td>
                    <span className={`${styles.cardType} ${styles[finance.type]}`}>
                      {finance.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'}
                    </span>
                  </td>
                  <td>{finance.category}</td>
                  <td>{finance.description}</td>
                  <td className={`${styles.cardAmount} ${styles[finance.type]}`}>
                    {finance.type === 'income' ? '+' : '-'}{formatCurrency(finance.amount)}
                  </td>
                  <td>{formatDate(finance.date)}</td>
                  <td>{finance.clientName || '‚Äî'}</td>
                  <td>{finance.paymentMethod}</td>
                  <td>
                    <div className={styles.tableActions}>
                      <button 
                        onClick={() => handleEditFinance(finance)}
                        className={`${styles.actionButton} ${styles.editButton}`}
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        onClick={() => handleDeleteFinance(finance.id)}
                        className={`${styles.actionButton} ${styles.deleteButton}`}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showModal && (
        <div className={styles.modalOverlay} onClick={() => setShowModal(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <h3 className={styles.modalTitle}>
              {editingFinance ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é' : '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
            </h3>
            
            <form onSubmit={handleSubmit}>
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏*</label>
                <select
                  name="type"
                  value={formData.type}
                  onChange={handleInputChange}
                  className={styles.formSelect}
                  required
                >
                  <option value="income">–î–æ—Ö–æ–¥</option>
                  <option value="expense">–†–∞—Å—Ö–æ–¥</option>
                </select>
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è*</label>
                <input
                  type="text"
                  name="category"
                  value={formData.category}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Å–ª—É–≥–∏, –ú–∞—Ç–µ—Ä–∏–∞–ª—ã, –ê—Ä–µ–Ω–¥–∞..."
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–û–ø–∏—Å–∞–Ω–∏–µ*</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  className={styles.formTextarea}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏..."
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–°—É–º–º–∞ (‚ÇΩ)*</label>
                <input
                  type="number"
                  name="amount"
                  value={formData.amount}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  placeholder="0"
                  min="0"
                  step="0.01"
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–î–∞—Ç–∞*</label>
                <input
                  type="date"
                  name="date"
                  value={formData.date}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–ö–ª–∏–µ–Ω—Ç</label>
                <input
                  type="text"
                  name="clientName"
                  value={formData.clientName}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*</label>
                <select
                  name="paymentMethod"
                  value={formData.paymentMethod}
                  onChange={handleInputChange}
                  className={styles.formSelect}
                  required
                >
                  <option value="–ù–∞–ª–∏—á–Ω—ã–µ">–ù–∞–ª–∏—á–Ω—ã–µ</option>
                  <option value="–ö–∞—Ä—Ç–∞">–ö–∞—Ä—Ç–∞</option>
                  <option value="–ü–µ—Ä–µ–≤–æ–¥">–ü–µ—Ä–µ–≤–æ–¥</option>
                  <option value="–û–Ω–ª–∞–π–Ω">–û–Ω–ª–∞–π–Ω</option>
                </select>
              </div>

              <div className={styles.modalActions}>
                <button 
                  type="button" 
                  onClick={() => setShowModal(false)}
                  className={styles.cancelButton}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  type="submit"
                  className={styles.saveButton}
                >
                  {editingFinance ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default FinancePage;
